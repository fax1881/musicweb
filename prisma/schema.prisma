generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  passwordHash   String
  role           Role     @default(EDITOR)
  emailVerified  DateTime? @map("email_verified")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // NextAuth relations
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Artist {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  bio         String?
  image       String?
  socials     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  releases    Release[]
}

model Release {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  type        String   // single, album, ep
  date        DateTime
  coverImage  String?
  tracks      Json?
  artistId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  artist      Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model News {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  publishedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Setting {
  key   String @id
  value String
}
